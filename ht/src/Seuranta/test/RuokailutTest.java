package Seuranta.test;
// Generated by ComTest BEGIN
import Seuranta.*;
import java.util.*;
import java.io.File;
import java.io.IOException;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.24 22:14:13 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class RuokailutTest {



  // Generated by ComTest BEGIN
  /** testIterator72 */
  @Test
  public void testIterator72() {    // Ruokailut: 72
    Ruokailut ruokailut = new Ruokailut(); 
    Ruokailu ruoka1 = new Ruokailu(); ruokailut.lisaaRuokailu(ruoka1); 
    Ruokailu ruoka2 = new Ruokailu(); ruokailut.lisaaRuokailu(ruoka2); 
    Iterator<Ruokailu> ruokailu2 = ruokailut.iterator(); 
    assertEquals("From: Ruokailut line: 81", ruoka1, ruokailu2.next()); 
    assertEquals("From: Ruokailut line: 82", ruoka2, ruokailu2.next()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testHaeRuokailut96 */
  @Test
  public void testHaeRuokailut96() {    // Ruokailut: 96
    Ruokailut ruokailut = new Ruokailut(); 
    Ruokailu ruoka1 = new Ruokailu(); 
    ruoka1.taytaAamupala(1); 
    ruokailut.lisaaRuokailu(ruoka1); 
    Ruokailu ruoka2 = new Ruokailu(); 
    ruoka2.taytaAamupala(2); 
    ruokailut.lisaaRuokailu(ruoka2); 
    List<Ruokailu> loyty; 
    loyty = ruokailut.haeRuokailut(1); 
    assertEquals("From: Ruokailut line: 109", 1, loyty.size()); 
    loyty = ruokailut.haeRuokailut(2); 
    assertEquals("From: Ruokailut line: 111", 1, loyty.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLue153 
   * @throws TallennusException when error
   * @throws IOException when error
   */
  @Test
  public void testLue153() throws TallennusException, IOException {    // Ruokailut: 153
    Ruokailut ruokailut = new Ruokailut(); 
    Ruokailu aamu = new Ruokailu(), ilta = new Ruokailu(); 
    aamu.taytaAamupala(1); 
    ilta.taytaAamupala(1); 
    String tiedosto = "testiruokailut"; 
    File ftied = new File(tiedosto + ".dat"); 
    ftied.delete(); 
    try {
    ruokailut.lue(tiedosto); 
    fail("Ruokailut: 167 Did not throw TallennusException");
    } catch(TallennusException _e_){ _e_.getMessage(); }
    ruokailut.lisaaRuokailu(aamu); 
    ruokailut.lisaaRuokailu(ilta); 
    ruokailut.tallenna(); 
    ruokailut = new Ruokailut(); 
    ruokailut.lue(tiedosto); 
    Iterator<Ruokailu> i = ruokailut.iterator(); 
    assertEquals("From: Ruokailut line: 174", aamu.toString(), i.next().toString()); 
    try {
    assertEquals("From: Ruokailut line: 175", ilta.toString(), i.next().toString()); 
    fail("Ruokailut: 175 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    assertEquals("From: Ruokailut line: 176", false, i.hasNext()); 
    assertEquals("From: Ruokailut line: 177", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoistaUniRuokailut269 */
  @Test
  public void testPoistaUniRuokailut269() {    // Ruokailut: 269
    Ruokailut ruokailut = new Ruokailut(); 
    Ruokailu ruoka1 = new Ruokailu(); ruoka1.taytaAamupala(1); 
    Ruokailu ruoka2 = new Ruokailu(); ruoka2.taytaAamupala(2); 
    Ruokailu ruoka3 = new Ruokailu(); ruoka3.taytaAamupala(1); 
    ruokailut.lisaaRuokailu(ruoka1); 
    ruokailut.lisaaRuokailu(ruoka2); 
    ruokailut.lisaaRuokailu(ruoka3); 
    assertEquals("From: Ruokailut line: 279", 2, ruokailut.poistaUniRuokailut(1)); assertEquals("From: Ruokailut line: 279", 1, ruokailut.getRuokailutMaara()); 
    assertEquals("From: Ruokailut line: 280", 0, ruokailut.poistaUniRuokailut(3)); assertEquals("From: Ruokailut line: 280", 1, ruokailut.getRuokailutMaara()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista302 
   * @throws TallennusException when error
   */
  @Test
  public void testPoista302() throws TallennusException {    // Ruokailut: 302
    Ruokailut ruokailut = new Ruokailut(); 
    Ruokailu tr1 = new Ruokailu(); tr1.taytaAamupala(1); 
    Ruokailu tr2 = new Ruokailu(); tr2.taytaAamupala(2); 
    Ruokailu tr3 = new Ruokailu(); tr3.taytaAamupala(1); 
    ruokailut.lisaaRuokailu(tr1); 
    ruokailut.lisaaRuokailu(tr2); 
    ruokailut.lisaaRuokailu(tr3); 
    assertEquals("From: Ruokailut line: 315", true, ruokailut.poista(tr3)); assertEquals("From: Ruokailut line: 315", 2, ruokailut.getRuokailutMaara()); 
    assertEquals("From: Ruokailut line: 316", true, ruokailut.poista(tr1)); assertEquals("From: Ruokailut line: 316", 1, ruokailut.getRuokailutMaara()); 
  } // Generated by ComTest END
}